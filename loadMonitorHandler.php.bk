<?php
	// Require API Key
	$start = microtime( true );

	if( ! isset( $_GET['key'] ) && $_GET['key'] !== 'cdff.1070bdaacf' )
		exit;

	// Define Database Constants
	define( 'DB_PREFIX', 'thirdmkt_' );
	define( 'DB_NAME', DB_PREFIX . 'loadmonitor' );
	define( 'DB_USER', DB_PREFIX . 'loadmon' );
	define( 'DB_PASS', '3rdRiver1910#$%LOADMON' );
	define( 'DB_HOST', '192.168.0.136' );
	define( 'DB_ROW_LIMIT', 1440 );

	// Simple Database Connection Class
	class DB_Connect {
		function __construct() {
			$this->connect = mysqli_connect(
				DB_HOST,
				DB_USER,
				DB_PASS,
				DB_NAME
			);

			// DB Connection failed, echo that
			if( ! $this->connect ){
				echo "Error: Unable to connect to MySQL." . PHP_EOL;
				//echo "Debugging errno: " . mysqli_connect_errno() . PHP_EOL;
				//echo "Debugging error: " . mysqli_connect_error() . PHP_EOL;
				exit;
			}
		}
	}

	// Initialize Database Connection
	(function(){
		global $mysqli;

		$database = new DB_Connect();
		$mysqli	 = $database->connect;
	})();

	// Manually Invoked Close Connection
	function close_mysqli(){
		global $mysqli;
		mysqli_close( $mysqli );
	}

	// Retrieve Past Scans
	function get_scan( $num_results = 1 ){
		global $mysqli;

		if( ! is_numeric( $num_results ) )
			return 'poop';

		$results = array();

		if( $query = $mysqli->prepare( "SELECT cpu_usage, sent_slack, sent_email FROM loadmonitor ORDER BY scan_id DESC LIMIT ?" ) ){
			$query->bind_param('i', $num_results);
			$query->execute();
			$query->bind_result( $cpu_usage, $sent_slack, $sent_email );

			while( $query->fetch() ){
				$results[] = array(
					//'scan_id'         => $scan_id,
					'cpu_usage'       => $cpu_usage,
					//'one_min_avg'     => $one_min_avg,
					//'five_min_avg'    => $five_min_avg,
					//'fifteen_min_avg' => $fifteen_min_avg,
					//'scan_time'       => $scan_time,
					'sent_slack'      => $sent_slack,
					'sent_email'      => $sent_email
				);
			}

			$query->close();
		} else {
			$results['query'] = 'failed';
		}
		
		return $results;
	}

	function scan_time( $timezone = 'America/Los_Angeles', $format = 'Y-m-d H:i:s' ){
		$datetime = new DateTime( 'now', new DateTimeZone( $timezone ) );
		$datetime->setTimestamp( time() );
		
		return $datetime->format( $format );
	}

	// Save Current Scan
	function save_scan( $cpu_usage = 0, $one_min_avg = 0, $five_min_avg = 0, $fifteen_min_avg = 0, $sent_slack = false, $sent_email = false ){

		/**
		 * @TODO: Prevent AUTO_INREMENT from getting enormous. Maybe
		 *        reset after 100k or so since we delete values
		 *
		 * "ALTER TABLE loadmonitor AUTO_INCREMENT = 0;"
		 */

		global $mysqli;

		// When was this scan?
		// $scan_time = scan_time(); # Why isn't this working?
		$scan_timestamp = time();
		$scan_timestamp = $scan_timestamp - 28800; // Subtract 8 hours
		$scan_time = date( 'Y-m-d H:i:s', $scan_timestamp ); // Convert to Date

		// Initialize Query
		$results = false;
		if( $query = $mysqli->prepare( "INSERT INTO loadmonitor (cpu_usage, one_min_avg, five_min_avg, fifteen_min_avg, scan_time, sent_slack, sent_email) VALUES (?, ?, ?, ?, ?, ?, ?)" ) ){
			$query->bind_param( "ddddsii", $cpu_usage, $one_min_avg, $five_min_avg, $fifteen_min_avg, $scan_time, $sent_slack, $sent_email );
			$query->execute();

			$results = $query->get_result();
			
			$query->close();
		}

		// Output Results (false if nothing effected, otherwise the number of rows effected)
		return ( $results->affected_rows === 0 ) ? false : $results->affected_rows;
	}

	function delete_scan(){
		global $mysqli;

		// See how many rows exist
		if( $query = $mysqli->query( "SELECT COUNT(*) FROM loadmonitor" ) ){
			$rows = mysqli_fetch_row( $query );
			$total_rows = $rows[0];
		}

		// If total rows is greater than our limit
		if( $total_rows > DB_ROW_LIMIT ){
			$limit = $total_rows - DB_ROW_LIMIT;
			
			// Attempt to Delete it
			if( $query = $mysqli->prepare( "DELETE FROM loadmonitor ORDER BY scan_id ASC LIMIT ?" ) ){
				$query->bind_param( 'i', $limit );
				$query->execute();

				$query->close();
				return true; // Delete Succeeded
			} else {
				return false; // Delete Failed
			}
		} else {
			return false; // Delete Unneccessary
		}
	}

	// Make sure API Key is valid (currently arbitrary)
	function alert_level( $load, $cores ){
		$percent = ( $load / $cores ) * 100;

		if( $percent > 300 ){
			// 24 load on 8 cores - Alert NOW
			return 'critical';
		} else if( $percent > 100 ){
			// Max load
			return 'high';
		} else if( $percent > 66.66 ){
			// Fair Load, but less than max - Consider Watching
			return 'nominal';
		} else if( $percent > 33.33 ){
			// Low load - Don't care
			return 'low';
		} else {
			// Less than a third utilized, why are we even here?
			return 'optimal';
		}
	}

	// Set up $load_monitor object
	(function(){
		global $load_monitor;
		
		$load_monitor = new stdClass();
		foreach( $_GET as $key => $value ){
			$load_monitor->$key = $value;
		}

		$load_monitor->cpu_usage = ( $load_monitor->one_min_avg / $load_monitor->cores ) * 100;
		$load_monitor->status    = ucwords( alert_level( $load_monitor->one_min_avg, $load_monitor->cores ) );
	})();

	function slackmoji(){
		global $load_monitor;

		switch( $load_monitor->status ){
			case "Critical":
				$emoji = 'fire'; break;
			case "High":
				$emoji = 'warning'; break;
			case "Nominal":
				$emoji = 'white_check_mark'; break;
			case "Low":
				$emoji = 'heavy_check_mark'; break;
			case "Optimal":
				$emoji = 'star2'; break;
			default:
				$emoji = 'warning';
		}

		return ":$emoji:";
	}

	// Slack Handler
	function slack_handler( $channel = false, $message_override = false ){
		global $load_monitor;

		$webhook_url = 'https://hooks.slack.com/services/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';
		
		if( !$message_override ){
			$array = array(
				'text' => slackmoji()." *$load_monitor->status Server Load*\r\n
	The One Minute Load Average for *$load_monitor->hostname* is *$load_monitor->status*, running at `$load_monitor->cpu_usage%` capacity.\r\n
	The maximimum stable load is `$load_monitor->cores`, and is currently: `$load_monitor->one_min_avg`.\r\n\r\n
	<https://$load_monitor->hostname/whm/|WHM Login>	|	<https://manage.liquidweb.com/|LW Manage>	|	<mailto:support@liquidweb.com|Email Support>\r\n"
			);
		} else {
			$array = array(
				'text' => $message_override
			);
		}

		if( $channel ){
			$array['channel'] = $channel; // My Personal Channel Override for Now
		}

		$json    = json_encode( $array );
		$payload = "payload=$json";

		$ch = curl_init( $webhook_url );
		curl_setopt( $ch, CURLOPT_POST, 1 );
		curl_setopt( $ch, CURLOPT_POSTFIELDS, $json );
		curl_setopt( $ch, CURLOPT_FOLLOWLOCATION, 1 );
		curl_setopt( $ch, CURLOPT_HEADER, 0 );
		curl_setopt( $ch, CURLOPT_RETURNTRANSFER, 1 );

		if( $response = curl_exec( $ch ) ){
			return true;
		} else {
			return false;
		}
	}

	// Email Handler
	function email_handler( $recipients = array( 'demchak.alex@gmail.com' ) ){
		global $load_monitor, $start;

		$header = "From: Load Monitor <loadMonitorPHP@web01.redbrickdigital.net>\r\n"; 
		$header.= "MIME-Version: 1.0\r\n"; 
		$header.= "Content-Type: text/html; charset=ISO-8859-1\r\n"; 
		$header.= "X-Priority: 1\r\n"; 

		$body = '<!doctype html>
<html>
	<head>
		<meta name="viewport" content="width=device-width" />
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		<title>Third River Marketing</title>
		<style>img{border:none;-ms-interpolation-mode:bicubic;max-width:100%}body{background-color:#f6f6f6;font-family:sans-serif;-webkit-font-smoothing:antialiased;font-size:14px;line-height:1.4;margin:0;padding:0;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}table{border-collapse:separate;mso-table-lspace:0pt;mso-table-rspace:0pt;width:100%}table td{font-family:sans-serif;font-size:14px;vertical-align:top}.body{background-color:#f6f6f6;width:100%}.container{display:block;Margin:0 auto!important;max-width:580px;padding:10px;width:580px}.content{box-sizing:border-box;display:block;Margin:0 auto;max-width:580px;padding:10px}.main{background:#fff;border-radius:3px;width:100%}.wrapper{box-sizing:border-box;padding:20px}.content-block{padding-bottom:10px;padding-top:10px}.footer{clear:both;Margin-top:10px;text-align:center;width:100%}.footer td,.footer p,.footer span,.footer a{color:#999;font-size:12px;text-align:center}h1,h2,h3,h4{color:#000;font-family:sans-serif;font-weight:400;line-height:1.4;margin:0;Margin-bottom:30px}h1{font-size:35px;font-weight:300;text-align:center;text-transform:capitalize}p,ul,ol{font-family:sans-serif;font-size:14px;font-weight:400;margin:0;Margin-bottom:15px}p li,ul li,ol li{list-style-position:inside;margin-left:5px}a{color:#3498db;text-decoration:underline}.btn{box-sizing:border-box;width:100%}.btn>tbody>tr>td{padding-bottom:15px}.btn table{width:auto}.btn table td{background-color:#fff;border-radius:5px;text-align:center}.btn a{background-color:#fff;border:solid 1px #3498db;border-radius:5px;box-sizing:border-box;color:#3498db;cursor:pointer;display:inline-block;font-size:14px;font-weight:700;margin:0;padding:12px 25px;text-decoration:none}.btn-primary table td{background-color:#3498db}.btn-primary a{background-color:#3498db;border-color:#3498db;color:#fff}.last{margin-bottom:0}.first{margin-top:0}.align-center{text-align:center}.align-right{text-align:right}.align-left{text-align:left}.clear{clear:both}.mt0{margin-top:0}.mb0{margin-bottom:0}.preheader{color:transparent;display:none;height:0;max-height:0;max-width:0;opacity:0;overflow:hidden;mso-hide:all;visibility:hidden;width:0}.powered-by a{text-decoration:none}hr{border:0;border-bottom:1px solid #f6f6f6;Margin:20px 0}@media only screen and (max-width:620px){table[class=body] h1{font-size:28px!important;margin-bottom:10px!important}table[class=body] p,table[class=body] ul,table[class=body] ol,table[class=body] td,table[class=body] span,table[class=body] a{font-size:16px!important}table[class=body] .wrapper,table[class=body] .article{padding:10px!important}table[class=body] .content{padding:0!important}table[class=body] .container{padding:0!important;width:100%!important}table[class=body] .main{border-left-width:0!important;border-radius:0!important;border-right-width:0!important}table[class=body] .btn table{width:100%!important}table[class=body] .btn a{width:100%!important}table[class=body] .img-responsive{height:auto!important;max-width:100%!important;width:auto!important}}@media all{.ExternalClass{width:100%}.ExternalClass,.ExternalClass p,.ExternalClass span,.ExternalClass font,.ExternalClass td,.ExternalClass div{line-height:100%}.apple-link a{color:inherit!important;font-family:inherit!important;font-size:inherit!important;font-weight:inherit!important;line-height:inherit!important;text-decoration:none!important}.btn-primary table td:hover{background-color:#34495e!important}.btn-primary a:hover{background-color:#34495e!important;border-color:#34495e!important}}pre{background:#eee;padding:10px 20px;display:inline-block;font-weight:900;letter-spacing:1px;font-size:18px;border:1px solid #e0e0e0}</style>
	</head>
	<body class="">
		<table border="0" cellpadding="0" cellspacing="0" class="body">
			<tr>
				<td>&nbsp;</td>
				<td class="container">
					<div class="content">
						<div style="text-align:center;"><a href="https://thirdrivermarketing.com/" target="_blank"><img src="https://thirdrivermarketing.com/keygen/400-wide.png"></a></div>
						<table class="main">
							<tr>
								<td class="wrapper">
									<table border="0" cellpadding="0" cellspacing="0">
										<tr>
											<td>
												<p>The One Minute Load Average for <strong>'. $load_monitor->hostname .'</strong> is <strong>'. $load_monitor->status .'</strong>, running at <strong>'. $load_monitor->cpu_usage .'%</strong> capacity.</p>
												<p>The maximimum stable load for this server is <strong>'. $load_monitor->cores .'</strong>, and it is currently:<br /><pre>'. $load_monitor->one_min_avg .'</pre></p>
												<p>Please keep an eye on the server load, and alert your Hosting Provider if necessary.
												<table border="0" cellpadding="0" cellspacing="0" class="">
													<tbody>
														<tr>
															<td align="left">
																<table border="0" cellpadding="0" cellspacing="0">
																	<tbody>
																		<tr>
																			<td class="btn btn-primary"><a href="https://'. $load_monitor->hostname .'/whm/" rel="nofollow noopener" target="_blank">Login to WHM Panel</a></td>
																		</tr>
																		<tr><br></tr>
																		<tr>
																			<td class="btn btn-primary"><a href="https://manage.liquidweb.com/" rel="nofollow noopener" target="_blank">Login to Manage</a></td>
																		</tr>
																		<tr><br></tr>
																		<tr>
																			<td class="btn btn-primary"><a href="mailto:support@liquidweb.com" rel="nofollow noopener" target="_blank">Contact Support: support@liquidweb.com</a></td>
																		</tr>
																		<tr><td></td></tr>
																	</tbody>
																</table>
															</td>
														</tr>
													</tbody>
												</table>
												<p style="padding-top:16px;">This script was run by a cron job for /home/thirdmkt/loadMonitorPHP on thirdrivermarketing.com</p>
												<p style="padding-top:16px;">This script was completed in '. round( (microtime(true) - $start), 5 ).' seconds</p>
											</td>
										</tr>
									</table>
								</td>
							</tr>
						</table>
						<div class="footer">
							<table border="0" cellpadding="0" cellspacing="0">
								<tr>
									<td class="content-block">
										<span class="apple-link">Third River Marketing</span>
										<br> 1436 Commercial St. NE, Salem OR 97301
										<br> (503) 581-4554
									</td>
								</tr>
							</table>
						</div>
					</div>
				</td>
				<td>&nbsp;</td>
			</tr>
		</table>
	</body>
</html>';
	
		if( count( $recipients ) > 0 ){
			if( $mail = mail( implode(',', $recipients), "⚠ {$load_monitor->status} Load on {$load_monitor->hostname} - [{$load_monitor->one_min_avg}]", $body, $header ) ){
				return true;
			} else {
				return false;
			}
		}
	}

	(function(){
		// Init Vars
		global $load_monitor;
		$slack_counter = $email_counter = 0;
		$slacked_this_scan = $emailed_this_scan = false;
		
		// Get Results of last hour's worth of scans
		$results = get_scan( 60 );

		// Critical Threshold in minutes
		$threshold = 10;

		// Loop Through Scan Results
		$counter = 0;
		foreach( $results as $result ){
			if( $result['sent_slack'] ) $slack_counter++;
			if( $result['sent_email'] ) $email_counter++;
	
			// If server load is critical		
			if( $load_monitor->status == 'critical' ){
				// Break foreach at the threshold.
				if( $counter == $threshold ){
					break;
				}
			}
			$counter++;
		}

		// If no notifications sent, and status warrants, send one. 
		if( $load_monitor->status == 'Critical' || $load_monitor->status == 'High' ){
			if( $slack_counter < 1 ){
				$slacked_this_scan = slack_handler( 'D19LY2ZFX' );
			}
			// If no emails sent, send one
			if( $email_counter < 1 ){
				$emailed_this_scan = email_handler( array( 'demchak.alex@gmail.com' ) );
			}
		}

		// Save this Scan
		$save = save_scan( $load_monitor->cpu_usage, $load_monitor->one_min_avg, $load_monitor->five_min_avg, $load_monitor->fifteen_min_avg, $slacked_this_scan, $emailed_this_scan );

		// Have last scans fall off
		delete_scan();
	})();